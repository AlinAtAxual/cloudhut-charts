# Default values for kowl.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  registry: quay.io
  # Use "cloudhut/kowl-business" for the business version
  repository: cloudhut/kowl
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "v1.5.0"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  runAsUser: 99
  fsGroup: 99

securityContext:
  runAsNonRoot: true
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: LoadBalancer
  port: 8081
  annotations: {}
  targetPort: http

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: platform.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

kowl:
  # Config.yaml is required for Kowl and Kowl Business.
  # See reference config: https://github.com/cloudhut/kowl/blob/master/docs/config/kowl.yaml)
  config:
    kafka:
      brokers:
        - local-kafka-bootstrap:9093
      schemaRegistry:
        enabled: true
        urls: https://axual-local-schema-registry-slave:25000
        tls:
            enabled: true
            insecureSkipTlsVerify: true
      tls:
        enabled: true
        caFilepath: "/etc/tls/key-material/cluster-operator.crt"
        certFilepath: "/etc/tls/key-material/cluster-operator.crt"
        keyFilepath: "/etc/tls/key-material/cluster-operator.key"
        passphrase: "Wmc5aUZuNjZrellj" # It's the base64 encoding of this string: "Zg9iFn66kzYc"
        insecureSkipTlsVerify: true
    connect:
      enabled: true
      clusters:
        - name: "axual-local-axual-connect"
          url: "https://axual-local-axual-connect:11000"
          tls:
            enabled: true
            insecureSkipTlsVerify: true
        - name: distributor
          tls:
            enabled: false
          url: http://local-distributor-connect-api:8083


  # roleBindings:

# Additional environment variables for kowl
extraEnv: ""
  # - name: KAFKA_RACKID
  #   value: "1"

# Additional environment variables for kowl mapped from Secret or ConfigMap
extraEnvFrom: ""

extraVolumes:
  # The Strimzi-kafka broker certificate becomes a volume for this
  - name: "local-kafka-brokers-certificates"
    secret:
      secretName: "local-cluster-operator-certs"
      optional: false

# Add additional volumes mounts, e. g. for tls keys
extraVolumeMounts:
  - name: "local-kafka-brokers-certificates"
    mountPath: "/etc/tls/key-material"
    readOnly: true

# Add additional containers, e. g. for oauth2-proxy
extraContainers: {}

secret:
  # existingSecret can be used if you create the secret with the needed key value pairs on your own. Specify the
  # secret name here and it will be used. Please make sure you specify all the below key names even if you don't need them.
  # Take a look at /examples/secret.yaml to create the secret.
  # Valid secret keys are (some only apply for the business version of Kowl):
  #  - kafka-sasl-password
  #  - kafka-tls-ca
  #  - kafka-tls-cert
  #  - kafka-tls-key
  #  - kafka-tls-passphrase
  #  - cloudhut-license-token
  #  - login-jwt-secret (used for signing and validating JWT)
  #  - login-google-oauth-client-secret
  #  - login-google-groups-service-account.json
  #  - login-github-oauth-client-secret
  #  - login-github-personal-access-token
  #  - login-okta-client-secret
  #  - login-okta-directory-api-token
  existingSecret:
  # Alternative named for secret keys
  # Keys for kafka-tls-ca, kafka-tls-cert and kafka-tls-key does not need to alter here. But additional env variables needs to be set like
  # KAFKA_TLS_CAFILEPATH=/etc/kowl/secrets/<key-name>
  keyName:
    cloudhut-license-token: "cloudhut-license-token"
    kafka-tls-passphrase: "kafka-tls-passphrase"
    kafka-sasl-password: "kafka-sasl-password"

  # Secret values in case you want the chart to create a secret
  # Kafka secrets
  kafka: {}
    # saslPassword:
    # tlsCa:
    # tlsCert:
    # tlsKey:
    # tlsPassphrase:
  # CloudHut secrets (business version)
  cloudhut: {}
    # licenseToken:
  # SSO secrets (business version)
  login:
    google: {}
      # clientSecret:
    # groupsServiceAccount:
    github: {}
      # clientSecret:
    # personalAccessToken:

## Configure extra options for liveness and readiness probes
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes)
livenessProbe:
  initialDelaySeconds: 0
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  # Give Kowl initially some time to connect to all Kafka Brokers
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 1
  successThreshold: 1
  failureThreshold: 3
